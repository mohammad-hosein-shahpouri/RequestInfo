{"version":3,"sources":["components/Footer.tsx","components/Layout.tsx","utils/models/Context.ts","components/TimeInfo.tsx","components/ClientInfo.tsx","components/NetworkInfo.tsx","App.tsx","utils/request/NetworkInformation.ts","index.tsx"],"names":["Footer","now","Date","className","getUTCFullYear","icon","version","Layout","props","children","NetworkInfoContext","createContext","Info","SetInfo","value","TimeInfo","useContext","timezoneOffset","Math","floor","time_zone","offset","current_time","name","getDate","getMonth","getFullYear","getHours","getMinutes","ClientInfo","osName","osVersion","browserName","browserVersion","NetworkInfo","mapRef","useRef","flagUrl","process","country_code2","useEffect","map","L","current","setView","lat","Number","latitude","lng","longitude","tileLayer","addTo","marker","bindPopup","openPopup","ip","country_name","src","alt","style","height","ref","continent_name","state_prov","city","district","isp","country_tld","calling_code","App","data","useState","networkInfo","setNetworkInfo","Provider","library","add","fab","fas","far","a","fetch","url","method","request","json","require","config","rootElement","document","getElementById","GetInfoAsync","then","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.58bd4c89.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Fragment, version } from \"react\";\n\nexport function Footer() {\n  const now = new Date();\n  return (\n    <Fragment>\n      <div className=\"bg-secondary text-white d-flex flex-column flex-md-row justify-content-between py-1 px-1 px-md-4\">\n        <span className=\"text-center d-block\">\n          Â© {now.getUTCFullYear()} - Mohammad Hosein Shahpouri\n        </span>\n\n        <p className=\"d-flex flex-row align-items-center justify-content-center text-center mb-0\">\n          <span className=\"\">Made with</span>\n          <FontAwesomeIcon icon=\"heart\" className=\"text-danger mx-1\" />        \n          <span className=\"\">and</span>          \n          <FontAwesomeIcon icon=\"coffee\" className=\"text-light mx-1\" /> \n        </p>\n      </div>\n      <p className=\"bg-light text-info text-center\">\n          <FontAwesomeIcon icon={[\"fab\",\"react\"]} className=\"mx-1 mt-1\" /> \n          <span>{version}</span>         \n      </p>\n    </Fragment>\n  );\n}\n","import { Fragment } from \"react\";\nimport { Footer } from \"./Footer\";\n\nexport function Layout(props: any) {\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">{props.children}</div>\n      </div>\n      <Footer />\n    </Fragment>\n  );\n}\n","import { createContext } from \"react\";\nimport { ApiResponseType } from \"./ApiResponse\";\n\nconst NetworkInfoContext = createContext({\n  Info: {} as ApiResponseType,\n  SetInfo: (value: React.SetStateAction<ApiResponseType>) => {},\n});\n\nexport { NetworkInfoContext };\n","import { Fragment, useContext } from \"react\";\nimport { NetworkInfoContext } from \"../utils/models/Context\";\n\nexport function TimeInfo() {\n  const { Info } = useContext(NetworkInfoContext);\n  const timezoneOffset =\n    \"GTM\" +\n    (Math.floor(Info.time_zone.offset) > 0\n      ? \"+\" + Math.floor(Info.time_zone.offset)\n      : Math.floor(Info.time_zone.offset)) +\n    ((Info.time_zone.offset / 0.5) % 2 !== 0 ? \":30\" : \":00\");\n\n  var now = new Date(Info.time_zone.current_time);\n  return (\n    <Fragment>\n      <h3 className=\"text-center mt-2\">Time:</h3>\n      <div className=\"d-flex flex-row justify-content-between\">\n        <h4>Time Zone:</h4>\n        <h4>{Info.time_zone.name}</h4>\n      </div>\n      <div className=\"d-flex flex-row justify-content-between\">\n        <h4>Time Zone Offset:</h4>\n        <h4>{timezoneOffset}</h4>\n      </div>\n      <div className=\"d-flex flex-row justify-content-between\">\n        <h4>Now:</h4>\n        <h4>{`${now.getDate()}/${now.getMonth()}/${now.getFullYear()} ${now.getHours()}:${now.getMinutes()}`}</h4>\n      </div>\n    </Fragment>\n  );\n}\n","import { Fragment } from \"react\";\nimport {\n  osName,\n  osVersion,\n  browserName,\n  browserVersion,\n} from \"react-device-detect\";\n\nexport function ClientInfo() {\n  return (\n    <Fragment>\n      <h3 className=\"text-center mt-2\">Client:</h3>\n      <div className=\"d-flex flex-row justify-content-between\">\n        <h4>OS:</h4>\n        <h4>{osName}</h4>\n      </div>\n      <div className=\"d-flex flex-row justify-content-between\">\n        <h4>OS Version:</h4>\n        <h4>{osVersion}</h4>\n      </div>\n      <div className=\"d-flex flex-row justify-content-between\">\n        <h4>Browser Name:</h4>\n        <h4>{browserName}</h4>\n      </div>\n      <div className=\"d-flex flex-row justify-content-between\">\n        <h4>Browser Version:</h4>\n        <h4>{browserVersion}</h4>\n      </div>\n    </Fragment>\n  );\n}\n","import L from \"leaflet\";\nimport React, { Fragment, useContext, useEffect, useRef } from \"react\";\nimport { NetworkInfoContext } from \"../utils/models/Context\";\nimport \"leaflet/dist/leaflet.css\";\nimport { TimeInfo } from \"./TimeInfo\";\nimport { ClientInfo } from \"./ClientInfo\";\n\nexport function NetworkInfo() {\n  const mapRef = useRef<HTMLDivElement>(null);\n\n  const { Info } = useContext(NetworkInfoContext);\n  const flagUrl =\n    process.env.REACT_APP_FLAG_IMAGE_URL +\n    Info.country_code2 +\n    process.env.REACT_APP_FLAG_IMAGE_TYPE;\n\n  useEffect(() => {\n    var map = L.map(mapRef.current!).setView(\n      {\n        lat: Number(Info.latitude),\n        lng: Number(Info.longitude),\n      },\n      13\n    );\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\").addTo(\n      map\n    );\n    L.marker({\n      lat: Number(Info.latitude),\n      lng: Number(Info.longitude),\n    })\n      .addTo(map)\n      .bindPopup(\"Your Location\")\n      .openPopup();\n  });\n\n  return (\n    <Fragment>\n      <div className=\"col-11\">\n        <h1 className=\"text-center mb-0 mt-2\">You're connected to:</h1>\n        <h1 className=\"text-center\">{Info.ip}</h1>\n      </div>\n      <div className=\"col-11 d-flex flex-column\">\n        <h2 className=\"text-center\">From {Info.country_name}</h2>\n        <img src={flagUrl} alt={Info.country_name} className=\"rounded-3\" />\n      </div>\n      <div className=\"col-11\">\n        <h3 className=\"text-center mt-2\">On Map:</h3>\n        <div\n          style={{ height: \"200px\" }}\n          className=\"rounded-3\"\n          ref={mapRef}\n        ></div>\n      </div>\n\n      <div className=\"col-12\">\n        <h3 className=\"text-center mt-2\">Extra Information:</h3>\n        <div className=\"d-flex flex-row justify-content-between\">\n          <h4>Continent:</h4>\n          <h4>{Info.continent_name}</h4>\n        </div>\n        <div className=\"d-flex flex-row justify-content-between\">\n          <h4>State:</h4>\n          <h4>{Info.state_prov}</h4>\n        </div>\n        <div className=\"d-flex flex-row justify-content-between\">\n          <h4>City:</h4>\n          <h4>{Info.city}</h4>\n        </div>\n        <div className=\"d-flex flex-row justify-content-between\">\n          <h4>District:</h4>\n          <h4>{Info.district}</h4>\n        </div>\n        <div className=\"d-flex flex-row justify-content-between\">\n          <h4>ISP:</h4>\n          <h4>{Info.isp}</h4>\n        </div>\n        <div className=\"d-flex flex-row justify-content-between\">\n          <h4>Internet TLD:</h4>\n          <h4>{Info.country_tld}</h4>\n        </div>\n        <div className=\"d-flex flex-row justify-content-between\">\n          <h4>Calling Code:</h4>\n          <h4>{Info.calling_code}</h4>\n        </div>\n        <hr />\n        <TimeInfo />\n        <hr />\n        <ClientInfo />\n      </div>\n    </Fragment>\n  );\n}\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { useLayoutEffect, useState } from \"react\";\nimport { Layout } from \"./components/Layout\";\nimport { NetworkInfo } from \"./components/NetworkInfo\";\nimport { ApiResponseType } from \"./utils/models/ApiResponse\";\nimport { NetworkInfoContext } from \"./utils/models/Context\";\n\nlibrary.add(fab, fas, far);\n\ntype props = {\n  data: ApiResponseType;\n};\n\nexport function App({ data }: props) {\n  const [networkInfo, setNetworkInfo] = useState<ApiResponseType>(data);\n\n  return (\n    <NetworkInfoContext.Provider\n      value={{ Info: networkInfo, SetInfo: setNetworkInfo }}\n    >\n      <Layout>\n        <NetworkInfo></NetworkInfo>\n      </Layout>\n    </NetworkInfoContext.Provider>\n  );\n}\n","import { ApiResponseType } from \"../models/ApiResponse\";\n\nexport async function GetInfoAsync() {\n  const url = process.env.REACT_APP_INFO_URL as string;\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  var request = await fetch(url + apiKey, {\n    method: \"GET\",\n  });  \n  var data = (await request.json()) as ApiResponseType;\n  \n  return data;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { NetworkInfoContext } from \"./utils/models/Context\";\nimport { GetInfoAsync } from \"./utils/request/NetworkInformation\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"antd/dist/antd.dark.min.css\"\nimport \"bootstrap-icons/font/bootstrap-icons.css\"\nrequire(\"dotenv\").config();\n\nconst rootElement = document.getElementById(\"app\");\n\nGetInfoAsync().then((data) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App data={data} />\n    </React.StrictMode>,\n    rootElement\n  );\n});\n"],"sourceRoot":""}